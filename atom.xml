<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兜里没糖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-12T02:57:36.690Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>aliya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter踩坑</title>
    <link href="http://yoursite.com/2020/04/05/Flutter%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2020/04/05/Flutter%E8%B8%A9%E5%9D%91/</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2020-04-12T02:57:36.690Z</updated>
    
    <content type="html"><![CDATA[<ol><li>More than one file was found with OS independent path ‘META-INF/proguard/androidx-annotations.pro’<br>解决：在app下build.gradle文件中的android{}下添加：<br>packagingOptions {<br>exclude ‘META-INF/proguard/androidx-annotations.pro’<br>}</li><li>adb devices命令不存在<br>解决：需要在bash_profile中配置路径，如果终端使用的shell是zsh，则修改对应zsh的配置文件；(切换bash命令：chsh -s /bin/zsh 或 chsh -s /bin/bash)<br>配置路径：<br>// android<br>export ANDROID_HOME=本地Android SDK路径（例如：/Users/***/Library/Android/sdk）<br>export PATH=${PATH}:${ANDROID_HOME}/tools<br>export PATH=${PATH}:${ANDROID_HOME}/platform-tools</li><li>Android Studio开启无线调试<br>前提：手机和电脑在同一局域网中；<br>1、终端使用adb devices判断设备是否连接成功，如果连接成功;<br>2、为设备设置一个Tcp/Ip 的侦听端口(adb tcpip 8889);如果成功侦听，终端会返回：restarting in TCP mode port: 8889;<br>3、查看手机的网络IP地址；例如：(192.168.0.110);<br>4、连接手机的IP和端口：adb connect 192.168.0.110:8889;如果成功连接，终端会返回：already connected to 192.168.0.110:8889;<br>5、通过adb devices查看是否连接成功;<br>6、如果要断开某手机连接：adb disconnect 192.168.0.110:8889;</li><li>Flutter doctor<br>提示：Android license status unknown<br>解决：/Users/用户名/Library/Android/sdk/tools/bin/sdkmanager –update<br>报错：Warning: Could not create settings  java.lang.IllegalArgumentException<br>解决：brew install maven</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;More than one file was found with OS independent path ‘META-INF/proguard/androidx-annotations.pro’&lt;br&gt;解决：在app下build.gradle文件中的andro
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
    
      <category term="Flutter、Dart" scheme="http://yoursite.com/tags/Flutter%E3%80%81Dart/"/>
    
  </entry>
  
  <entry>
    <title>WebView交互</title>
    <link href="http://yoursite.com/2020/03/20/WebView%E4%BA%A4%E4%BA%92/"/>
    <id>http://yoursite.com/2020/03/20/WebView%E4%BA%A4%E4%BA%92/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-26T13:31:43.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WKWebView与UIWebView"><a href="#WKWebView与UIWebView" class="headerlink" title="WKWebView与UIWebView"></a>WKWebView与UIWebView</h3><p>UIWebView在iOS2就推出了，iOS7以前JS对OC的回调都是基于URL的拦截进行的操作，OC调用JS方法在UIWebView本身提供API：stringByEvaluatingJavaScriptFromString；<br>WKWebView是Apple在iOS8推出的Webkit框架中的负责网页的渲染与展示的类，相比UIWebView速度更快，占用内存更少，支持更多的HTML特性。WKWebView只支持代码创建。</p><h3 id="JS与OC互调"><a href="#JS与OC互调" class="headerlink" title="JS与OC互调"></a>JS与OC互调</h3><h4 id="拦截URL方式、URL劫持-WebViewJavascriptBridge"><a href="#拦截URL方式、URL劫持-WebViewJavascriptBridge" class="headerlink" title="拦截URL方式、URL劫持 (WebViewJavascriptBridge)"></a>拦截URL方式、URL劫持 (WebViewJavascriptBridge)</h4><p>在iOS7之前， Web页面和原生代码之间的一个桥梁就是WebViewJavascriptBridge，用来传输一些数据和方法的调用。WebViewJavascriptBridge的原理是iOS与前端首先定好一个scheme（scheme://<strong>BRIDGE_LOADED</strong>），加载一个特定标识的URL时，在UIWebView的代理方法shouldStartLoadWithRequest拦截URL；通过UIWebView的 stringByEvaluatingJavaScriptFromString方法执行js。<br>在WKWebView中也支持使用拦截的方式来做方法的调用，只是WKWebView是在decidePolicyForNavigationAction的代理方法中拦截URL；</p><h5 id="OC调用JS"><a href="#OC调用JS" class="headerlink" title="OC调用JS"></a>OC调用JS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[webView stringByEvaluatingJavaScriptFromString:@&quot;OCToJS(&#39;OC拦截到了我&#39;)&quot;];</span><br></pre></td></tr></table></figure><h5 id="JS调用OC"><a href="#JS调用OC" class="headerlink" title="JS调用OC"></a>JS调用OC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</span><br><span class="line">    </span><br><span class="line">    NSString *requestString &#x3D; [[[request URL] absoluteString]stringByRemovingPercentEncoding];</span><br><span class="line">    &#x2F;&#x2F; 拦截url</span><br><span class="line">    if ([requestString hasSuffix:@&quot;js_native:&#x2F;&#x2F;jsToOC&quot;]) &#123;</span><br><span class="line">        &#x2F;&#x2F; oc调用js方法</span><br><span class="line">        [webView stringByEvaluatingJavaScriptFromString:@&quot;OCToJS(&#39;OC拦截到了我&#39;)&quot;];</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- js调用oc --&gt;</span><br><span class="line">&lt;button onClick&#x3D;&quot;JSToOC()&quot;&gt;JS调用OC方法&lt;&#x2F;button&gt;</span><br><span class="line">&#x2F;&#x2F; js调用oc</span><br><span class="line">function JSToOC() &#123;</span><br><span class="line">    window.location.href &#x3D; &quot;js_native:&#x2F;&#x2F;jsToOC&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; oc调用js</span><br><span class="line">function OCToJS(param) &#123;</span><br><span class="line">    alert(param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScriptCore"><a href="#JavaScriptCore" class="headerlink" title="JavaScriptCore"></a>JavaScriptCore</h4><p>JavaScriptCore是从iOS7开始加入的，用Objective-C把WebKit的JavaScript引擎封装了一下，提供了简单快捷的方式与JavaScript交互。使用到的框架是：JavaScriptCore.framework。</p><h5 id="OC调用JS-1"><a href="#OC调用JS-1" class="headerlink" title="OC调用JS"></a>OC调用JS</h5><p>提供了两种方式：<strong>evaluateScript</strong>、<strong>callWithArguments</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- oc代码 --&gt;</span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView &#123;</span><br><span class="line">    JSContext *context &#x3D; [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">    &#x2F;* OC调用JS *&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 第一种方式：evaluateScript</span><br><span class="line">    [context evaluateScript:@&quot;OCToJS(&#39;evaluateScript&#39;)&quot;];</span><br><span class="line">    &#x2F;&#x2F; 第二种方式：callWithArguments</span><br><span class="line">    [context[@&quot;OCToJS&quot;] callWithArguments:@[@&quot;callWithArguments&quot;]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- js代码 oc调用js --&gt;</span><br><span class="line">function OCToJS(param) &#123;</span><br><span class="line">    alert(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JS调用OC-1"><a href="#JS调用OC-1" class="headerlink" title="JS调用OC"></a>JS调用OC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- js代码 js调用oc --&gt;</span><br><span class="line">&lt;button onClick&#x3D;&quot;JSToOC(&#39;success&#39;)&quot;&gt;JS调用OC方法&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- oc代码 --&gt;</span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView &#123;</span><br><span class="line">    JSContext *context &#x3D; [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">    &#x2F;* JS调用OC *&#x2F;</span><br><span class="line">    context[@&quot;JSToOC&quot;] &#x3D; ^() &#123;</span><br><span class="line">        NSArray *args &#x3D; [JSContext currentArguments];</span><br><span class="line">        for (id obj in args) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,obj);   &#x2F;&#x2F; success</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WKWebView-WKScriptMessageHandler"><a href="#WKWebView-WKScriptMessageHandler" class="headerlink" title="WKWebView (WKScriptMessageHandler)"></a>WKWebView (WKScriptMessageHandler)</h4><p>在 WKWebView 中不支持获取 JavascriptCore，但是其提供了一套 Message Handler 协议的方式来进行客户端与 JS 的通信; WebKit的库中有个代理WKScriptMessageHandler就是专门来做交互的。WKScriptMessageHandler其实就是一个遵循的协议，它能让网页通过JS把消息发送给OC。</p><h5 id="OC调用JS-2"><a href="#OC调用JS-2" class="headerlink" title="OC调用JS"></a>OC调用JS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation &#123;</span><br><span class="line">    [self.webView evaluateJavaScript:@&quot;OCToJS(&#39;OC发送了方法&#39;)&quot;</span><br><span class="line">                completionHandler:^(id _Nullable ret, NSError * _Nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,ret);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; oc调用js</span><br><span class="line">function OCToJS(param) &#123;</span><br><span class="line">    let res &#x3D; &#39;JS接受到了:&#39;+param</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JS调用OC-2"><a href="#JS调用OC-2" class="headerlink" title="JS调用OC"></a>JS调用OC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- js代码 --&gt;</span><br><span class="line">window.webkit.messageHandlers.jsCallOC.postMessage(&#123;&#39;name&#39;:&#39;yilan&#39;,&#39;id&#39;:&#39;1&#39;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- oc代码 --&gt;</span><br><span class="line">#pragma mark - WKWebView懒加载</span><br><span class="line">- (WKWebView *)webView &#123;</span><br><span class="line">    if (!_webView) &#123;</span><br><span class="line">        WKWebViewConfiguration *configuration &#x3D; [[WKWebViewConfiguration alloc] init];</span><br><span class="line">        configuration.userContentController &#x3D; [[WKUserContentController alloc]init];</span><br><span class="line">        [configuration.userContentController addScriptMessageHandler:self name:@&quot;jsCallOC&quot;];</span><br><span class="line">        </span><br><span class="line">        _webView &#x3D; [[WKWebView alloc]initWithFrame:CGRectZero configuration:configuration];</span><br><span class="line">        _webView.navigationDelegate &#x3D; self;</span><br><span class="line">        _webView.UIDelegate &#x3D; self;</span><br><span class="line">    &#125;</span><br><span class="line">    return _webView;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - WKScriptMessageHandler</span><br><span class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</span><br><span class="line">&#123;</span><br><span class="line">    NSString *methods &#x3D; [NSString stringWithFormat:@&quot;%@:&quot;, message.name];</span><br><span class="line">    if ([methods isEqualToString:@&quot;jsCallOC:&quot;]) &#123;</span><br><span class="line">        NSLog(@&quot;执行jsCallOC %@ %@&quot;, message.body[@&quot;name&quot;], message.body[@&quot;id&quot;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>github上提供了一个简单的demo实例，有需要的可以查看：<a href="https://github.com/kindlymental/JS_Native" target="_blank" rel="noopener">Demo实例</a></p><hr><p><a href="https://imciel.com/2016/06/18/oc-js-communication/" target="_blank" rel="noopener">参考资料</a><br><a href="https://75.team/post/ios-webview-and-js.html" target="_blank" rel="noopener">参考资料</a><br><a href="https://juejin.im/post/5d71fd92f265da03ce39fab8" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WKWebView与UIWebView&quot;&gt;&lt;a href=&quot;#WKWebView与UIWebView&quot; class=&quot;headerlink&quot; title=&quot;WKWebView与UIWebView&quot;&gt;&lt;/a&gt;WKWebView与UIWebView&lt;/h3&gt;&lt;p&gt;UI
      
    
    </summary>
    
    
      <category term="WebView" scheme="http://yoursite.com/categories/WebView/"/>
    
    
      <category term="JS与OC互调" scheme="http://yoursite.com/tags/JS%E4%B8%8EOC%E4%BA%92%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的多线程和异步操作实现同步执行</title>
    <link href="http://yoursite.com/2020/02/27/iOS%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/02/27/iOS%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C/</id>
    <published>2020-02-27T02:54:28.000Z</published>
    <updated>2020-03-10T05:14:17.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS多线程"><a href="#iOS多线程" class="headerlink" title="iOS多线程"></a>iOS多线程</h2><blockquote><p>线程：任务执行的最小单位；<br>主线程：用于执行用户UI的重要操作，耗时操作不要放在主线程，否则会卡死；<br>多线程：为了解决耗时操作执行的问题，引入了多线程；线程分为同步执行和异步执行；<br>同步和异步：同步指的是任务会立即在该线程执行，不会开辟新线程；异步指的是不一定会立即执行，可能会开辟新线程；<br>队列：队列是用来管理线程执行的；队列分为串行队列和并行队列；串行队列指的是按顺序执行；并行队列是可以同时执行；<br>主队列: iOS中主队列只会在主线程上执行，不能在同步执行主队列，会造成死锁；<a href="https://juejin.im/post/5a323c046fb9a044ff317c4d" target="_blank" rel="noopener">参考资料</a></p></blockquote><blockquote><p>GCD中的队列：<br>1、主队列 dispatch_main_queue(); 串行,用于更新UI；<br>2、全局队列 dispatch_global_queue(); 并行,四个优先级: background,low,default,high；<br>3、自定义队列 dispatch_queue_t queue; 可以自定义是并行: DISPATCH_QUEUE_CONCURRENT 或者串行 DISPATCH_QUEUE_SERIAL</p></blockquote><p>引用掘金的一副图片：<a href="https://juejin.im/post/5a90de68f265da4e9b592b40" target="_blank" rel="noopener">资料路径</a><br><img src="http://img.liugezhou.online/WechatIMG348.png" alt="线程和队列组合形式"></p><h2 id="iOS异步操作同步执行"><a href="#iOS异步操作同步执行" class="headerlink" title="iOS异步操作同步执行"></a>iOS异步操作同步执行</h2><p>在进行网络请求中，我们会经常因为业务需要对接口请求做不同的处理；以下主要介绍两类：多个网络请求在全部都得到响应后做业务处理、多个网络请求（数据相互依赖）要求实现同步执行；</p><blockquote><p>信号量(Semaphore)<br>队列组</p></blockquote><h3 id="多个网络请求在全部都得到响应后做业务处理"><a href="#多个网络请求在全部都得到响应后做业务处理" class="headerlink" title="多个网络请求在全部都得到响应后做业务处理"></a>多个网络请求在全部都得到响应后做业务处理</h3><p>1、信号量和队列组结合<br><img src="http://img.liugezhou.online/WechatIMG347.png" alt="信号量和队列组"><br>2、队列组(dispatch_group_t)<br><img src="http://img.liugezhou.online/WechatIMG346.png" alt="队列组"> </p><p>结果：网络请求返回顺序是无序的，等所有网络请求都拿到结果后会走group的notify方法；</p><h3 id="多个网络请求（数据相互依赖）要求实现同步执行-同步队列异步执行"><a href="#多个网络请求（数据相互依赖）要求实现同步执行-同步队列异步执行" class="headerlink" title="多个网络请求（数据相互依赖）要求实现同步执行 - (同步队列异步执行)"></a>多个网络请求（数据相互依赖）要求实现同步执行 - (同步队列异步执行)</h3><p><img src="http://img.liugezhou.online/WechatIMG349.png" alt="信号量控制异步操作同步执行"><br>同上操作：<img src="http://img.liugezhou.online/WechatIMG350.png" alt="信号量控制异步操作同步执行"><br>结果：网络请求都是顺序执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iOS多线程&quot;&gt;&lt;a href=&quot;#iOS多线程&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程&quot;&gt;&lt;/a&gt;iOS多线程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;线程：任务执行的最小单位；&lt;br&gt;主线程：用于执行用户UI的重要操作，耗时操作不要
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue常用依赖</title>
    <link href="http://yoursite.com/2020/01/20/Vue%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/"/>
    <id>http://yoursite.com/2020/01/20/Vue%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/</id>
    <published>2020-01-19T16:00:00.000Z</published>
    <updated>2020-04-05T12:02:50.310Z</updated>
    
    <content type="html"><![CDATA[<ol><li>vuex<br>作用：vue状态管理<br>安装：npm install vuex –save<br>开源地址：github<br>文档：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a></li><li>vue-resource<br>作用：通过XMLHttpRequest或JSONP发起请求并处理响应<br>安装：npm install vue-resource –save<br>开原地址：github</li><li>vue-router<br>作用：路由，控制页面跳转<br>安装：npm install vue-router –save<br>开原地址：github<br>文档：<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/</a></li><li>babel-runtime<br>作用：将es6编译成es5去运行，前端可以使用es6的语法来写，最终浏览器上运行的是es5<br>安装：npm install –save babel-runtime</li><li>babel-polyfill<br>作用：Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片<br>安装：npm install –save-dev babel-polyfill</li><li>fastclick<br>作用：处理移动端 click 事件 300 毫秒延迟。<br>说明： 为什么存在延迟？从点击屏幕上的元素到触发元素的 click 事件，移动浏览器会有大约 300 毫秒的等待时间。为什么这么设计呢？ 因为它想看看你是不是要进行双击（double tap）操作。<br>安装：npm install fastclick -D<br>开源地址：github</li><li>axios<br>作用：请求数据<br>安装：npm install –save axios<br>开源地址：github<br>文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a></li><li>lodash<br>作用：Lodash是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。<br>安装：npm i –save lodash<br>开源地址：github<br>文档：<a href="http://www.css88.com/doc/lodash/" target="_blank" rel="noopener">http://www.css88.com/doc/lodash/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;vuex&lt;br&gt;作用：vue状态管理&lt;br&gt;安装：npm install vuex –save&lt;br&gt;开源地址：github&lt;br&gt;文档：&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="依赖" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://yoursite.com/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2020-03-20T04:15:33.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口请求使用-Authorization-进行授权"><a href="#接口请求使用-Authorization-进行授权" class="headerlink" title="接口请求使用 Authorization 进行授权"></a>接口请求使用 Authorization 进行授权</h3><p>在做微信小程序时，需要使用 Authorization 进行授权，结果每次登录的时候都出现授权弹窗。<br>解决：使用Authorization 授权时，会将用户名和密码用 base64 进行编码然后放到 header 中传入后端代码，</p><blockquote><p>header: {<br>        ‘Content-Type’: ‘application/json’,<br>        ‘Authorization’: ‘Basic ‘ + base64Code,<br>      },<br>验证方式：在服务端也会有固定的用户名密码，与之比较，相同则身份通过，否则不通过才会出现授权弹窗。<br><a href="https://www.jianshu.com/p/499595423f95" target="_blank" rel="noopener">参考资料1</a><br><a href="https://www.cnblogs.com/Man-Dream-Necessary/p/8400376.html" target="_blank" rel="noopener">参考资料2</a></p></blockquote><h3 id="微信小程序授权注册流程"><a href="#微信小程序授权注册流程" class="headerlink" title="微信小程序授权注册流程"></a>微信小程序授权注册流程</h3><p>1、获取code，换取openId<br>    wx.login({<br>      success: res =&gt; {<br>        // 发送 res.code 到后台换取 openId, sessionKey, unionId<br>      }<br>    })<br>2、拉取授权<br>授权分为两种：用户信息授权和手机号授权；微信授权的拉取必须使用button控件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type&#x3D;&#39;primary&#39; open-type&#x3D;&quot;getUserInfo&quot; bindgetuserinfo&#x3D;&quot;getUserInfo&quot;&gt;</span><br><span class="line">&lt;button type&#x3D;&#39;primary&#39; open-type&#x3D;&quot;getPhoneNumber&quot; bindgetphonenumber&#x3D;&quot;getPhoneNumber&quot;&gt;</span><br></pre></td></tr></table></figure><p>用户信息授权直接可以在回调中获取到，但是手机号授权拿到的是一个加密的串，需要通过后台接口（session_key、iv、encrypted）进行解密返回手机号；</p><h3 id="微信小程序for循环中嵌套for循环"><a href="#微信小程序for循环中嵌套for循环" class="headerlink" title="微信小程序for循环中嵌套for循环"></a>微信小程序for循环中嵌套for循环</h3><p>如果在外层已经遍历了一次item，里边那层就不能使用item取变量；可以使用wx:for-item声明子元素；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:for&#x3D;&quot;&#123;&#123;item.tags&#125;&#125;&quot; wx:for-item&#x3D;&quot;items&quot; wx:key&#x3D;&#39;index&#39;&gt;</span><br><span class="line">  &lt;view&gt;&#123;&#123;items&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;block&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;接口请求使用-Authorization-进行授权&quot;&gt;&lt;a href=&quot;#接口请求使用-Authorization-进行授权&quot; class=&quot;headerlink&quot; title=&quot;接口请求使用 Authorization 进行授权&quot;&gt;&lt;/a&gt;接口请求使用 Auth
      
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Texture</title>
    <link href="http://yoursite.com/2019/12/30/Texture/"/>
    <id>http://yoursite.com/2019/12/30/Texture/</id>
    <published>2019-12-30T06:38:20.000Z</published>
    <updated>2020-03-10T05:14:49.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Texture来源"><a href="#Texture来源" class="headerlink" title="Texture来源"></a>Texture来源</h2><h4 id="FlexBox布局"><a href="#FlexBox布局" class="headerlink" title="FlexBox布局"></a>FlexBox布局</h4><p> iOS 系统默认提供的布局方式有两种：一种是 Frame 这种原始方式，也就是通过设置横纵坐标和宽高来确定布局。另一种是自动布局（Auto Layout），相比较于 Frame 需要指出每个视图的精确位置，自动布局对于视图位置的描述更加简洁和易读，只需要确定两个视图之间的关系就能够确定布局。</p><p> 前端技术栈的布局方式叫做FlexBox布局；苹果公司基于 Flexbox 的布局思路，又在自动布局之上封装了一层 UIStackView。Flexbox 比自动布局提供了更多、更规范的布局方法，布局方式考虑得更全面，使用起来也更加方便。Flexbox 在 2009 年被 W3C 提出，可以很简单、完整地实现各种页面布局，而且还是响应式的，开始被应用于前端领域，目前所有浏览器都已支持。后来通过 React Native 和 Weex 等框架，它被带入到客户端开发中，同时支持了 iOS 和 Android。</p><p> 与自动布局思路类似，Flexbox 使用的也是描述性的语言来布局。使用 Flexbox 布局的视图元素叫 Flex 容器（flex container），其子视图元素叫作 Flex 项目（flex item）。Flexbox 布局的主要思想是，通过 Flex 容器设定的属性来改变内部 Flex 项目的宽、高，并调整 flex 项目的位置来填充 flex 容器的可用空间。</p><p> <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰 布局方式</a></p><hr><h4 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h4><p> Texture 之前叫做AsyncDisplayKit，后改名为Texture；<br> Texture 可以保持最复杂的用户界面的流畅和响应。基于 Flexbox 的布局思路，Texture 框架的布局方案虽然学习成本会高一些，但是性能远好于苹果的自动布局，而且写起来更简单。</p><hr><h2 id="Texture介绍"><a href="#Texture介绍" class="headerlink" title="Texture介绍"></a>Texture介绍</h2><h4 id="Texture概念"><a href="#Texture概念" class="headerlink" title="Texture概念"></a>Texture概念</h4><p> <a href="http://texturegroup.org/docs/getting-started.html" target="_blank" rel="noopener">官方文档</a></p><p> Texture的基本单位就是node（节点）， ASDisplayNode可以看成是一个抽象UIView或者抽象的CALayer。不同点是nodes是线程安全的：可以在后台线程上并行实例化和配置它们的整个层次结构。</p><p> Texture 几乎涵盖了常用的控件，下面是 Texture 和 UIKit 的对应关系。</p><p><strong><em>Nodes</em></strong></p><table><thead><tr><th>Texture</th><th align="center">UIKit</th></tr></thead><tbody><tr><td>ASDisplayNode</td><td align="center">UIView</td></tr><tr><td>ASCellNode</td><td align="center">UITableViewCell/UICollectionViewCell</td></tr><tr><td>ASTextNode</td><td align="center">UILabel</td></tr><tr><td>ASButtonNode</td><td align="center">UIButton</td></tr><tr><td>ASImageNode</td><td align="center">UIImageView</td></tr><tr><td>ASNetworkImageNode</td><td align="center">UIImageView</td></tr><tr><td>ASMultiplexImageNode</td><td align="center">UIImageView</td></tr><tr><td>ASVideoNode</td><td align="center">AVPlayerLayer</td></tr><tr><td>ASControlNode</td><td align="center">UIControl</td></tr><tr><td>ASScrollNode</td><td align="center">UIScrollView</td></tr><tr><td>ASEditableTextNode</td><td align="center">UITextView</td></tr></tbody></table><p><strong><em>Node Containers</em></strong></p><table><thead><tr><th>Texture</th><th align="center">UIKit</th></tr></thead><tbody><tr><td>ASViewController</td><td align="center">UIViewController</td></tr><tr><td>ASCellNode</td><td align="center">ASTableNode/UITableView</td></tr><tr><td>ASCollectionNode</td><td align="center">UICollectionView</td></tr><tr><td>ASPagerNode</td><td align="center">UICollectionView</td></tr></tbody></table><hr><h4 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h4><p> Texture 框架的布局中，Texture 考虑到布局扩展性，提供了一个基类 ASLayoutSpec。这个基类 提供了布局的基本能力，使 Texture 可以通过它扩展实现多种布局思路，比如 Wrapper、Inset、Overlay、Ratio、Relative、Absolute 等布局思路，也可以继承 ASLayoutSpec 来自定义你的布局算法。</p><p><strong>ASLayoutSpec子类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ASAbsoluteLayoutSpec &#x2F;&#x2F; 绝对布局</span><br><span class="line">ASBackgroundLayoutSpec &#x2F;&#x2F; 背景布局</span><br><span class="line">ASInsetLayoutSpec &#x2F;&#x2F; 边距布局</span><br><span class="line">ASOverlayLayoutSpec &#x2F;&#x2F; 覆盖布局</span><br><span class="line">ASRatioLayoutSpec &#x2F;&#x2F; 比例布局</span><br><span class="line">ASRelativeLayoutSpec &#x2F;&#x2F; 顶点布局</span><br><span class="line">ASCenterLayoutSpec &#x2F;&#x2F; 居中布局</span><br><span class="line">ASStackLayoutSpec &#x2F;&#x2F; 盒子布局</span><br><span class="line">ASWrapperLayoutSpec &#x2F;&#x2F; 填充布局</span><br><span class="line">ASCornerLayoutSpec &#x2F;&#x2F; 角标布局</span><br></pre></td></tr></table></figure><hr><h3 id="Texture使用"><a href="#Texture使用" class="headerlink" title="Texture使用"></a>Texture使用</h3><h4 id="Texture安装"><a href="#Texture安装" class="headerlink" title="Texture安装"></a>Texture安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &quot;Texture&quot;</span><br></pre></td></tr></table></figure><h4 id="Texture使用-1"><a href="#Texture使用-1" class="headerlink" title="Texture使用"></a>Texture使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;AsyncDisplayKit &#x2F; AsyncDisplayKit.h&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Texture来源&quot;&gt;&lt;a href=&quot;#Texture来源&quot; class=&quot;headerlink&quot; title=&quot;Texture来源&quot;&gt;&lt;/a&gt;Texture来源&lt;/h2&gt;&lt;h4 id=&quot;FlexBox布局&quot;&gt;&lt;a href=&quot;#FlexBox布局&quot; class
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS布局方式" scheme="http://yoursite.com/tags/iOS%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目开发总结</title>
    <link href="http://yoursite.com/2019/12/30/iOS%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/30/iOS%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2020-03-17T16:51:30.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS项目创建"><a href="#iOS项目创建" class="headerlink" title="iOS项目创建"></a>iOS项目创建</h3><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><hr><h4 id="配置AppIcon和LaunchImage"><a href="#配置AppIcon和LaunchImage" class="headerlink" title="配置AppIcon和LaunchImage"></a>配置AppIcon和LaunchImage</h4><p> <strong><em>AppIcon:</em></strong><br> 生成器：App Icon Gear</p><p> <strong><em>LaunchScreen:</em></strong><br> 1.在LaunchScreen.storyboard中拖拽imageView并设置约束，取消勾选右侧Use as launch Screen。<br> 2.置空路径Launch Screen File。<br> 3.最后在工程 targets–Build Settings 搜索 Asset Catalog Launch Image Set Name 然后设置Launch Image 就可以了。<br> 从2020年4月开始，使⽤ iOS13 SDK 的 App 将必须提供 LaunchScreen，而LaunchImage将退出历史的舞台，说明以后启动页要通过LaunchScreen来设置了。</p><hr><h4 id="获取其他APP的图片"><a href="#获取其他APP的图片" class="headerlink" title="获取其他APP的图片"></a>获取其他APP的图片</h4><p> 如果我们手中没有UI素材，可以使用其他APP的图片做测试，这时需要使用到以下的工具：</p><ul><li><p><em>Apple Configurator工具</em></p></li><li><p><em>Cartool工具</em></p><blockquote><p><strong>Apple Configurator工具</strong></p></blockquote></li></ul><p> <em>文件目录：<br> ~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/</em></p><blockquote><p><strong>Cartool工具</strong><br> <em><a href="https://github.com/yuedong56/Assets.carTool" target="_blank" rel="noopener">CarTool工具 解压Assets.car文件</a></em></p></blockquote><h3 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h3><h4 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h4><blockquote><p><strong>xib里 file’s owner class 与 custom class 的区别</strong><br>xib文件本身可以看做是一个xml，app启动的时候会根据xml构造xib对应的界面及其控件，file’s owner 可以看做是xib对应的类，连接outlet控件需要设置；<br>custom class的作用：view本身是UIView, 在代码中使用时, 要使用指定的类型方法, 需要设置custom class为某类型；</p></blockquote><h4 id="iOS报错问题总结"><a href="#iOS报错问题总结" class="headerlink" title="iOS报错问题总结"></a>iOS报错问题总结</h4><blockquote><p><strong>真机调试报错：dyld: Library not loaded: @rpath/Bagel.framework/Bagel</strong><br>真机需要将有问题的framework直接引用，在targets-&gt;Build Phases -&gt;Link Binary With Libraries 中添加的第三方库，针对有问题的framework，把status选成optional。<br><strong>iOS真机调试错误Reason: no suitable image found. Did find:</strong><br>删除APP重新安装，因为你的证书在上一次安装到现在安装失败这段时间里证书被重置过，两次的签名不一样，而Bundle identifier ID又是同一个，所以安装会失败。</p></blockquote><blockquote><p><strong>iOS清除缓存命令</strong><br>rm -rf “$(getconf DARWIN_USER_CACHE_DIR)/org.llvm.clang/ModuleCache”<br>rm -rf ~/Library/Developer/Xcode/DerivedData<br>rm -rf ~/Library/Caches/com.apple.dt.Xcode</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS项目创建&quot;&gt;&lt;a href=&quot;#iOS项目创建&quot; class=&quot;headerlink&quot; title=&quot;iOS项目创建&quot;&gt;&lt;/a&gt;iOS项目创建&lt;/h3&gt;&lt;h4 id=&quot;项目配置&quot;&gt;&lt;a href=&quot;#项目配置&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="项目配置" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>iOS13适配</title>
    <link href="http://yoursite.com/2019/12/23/iOS13%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2019/12/23/iOS13%E9%80%82%E9%85%8D/</id>
    <published>2019-12-23T01:23:27.000Z</published>
    <updated>2020-03-22T15:02:07.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="KVC限制，私有API被封禁"><a href="#KVC限制，私有API被封禁" class="headerlink" title="KVC限制，私有API被封禁"></a>KVC限制，私有API被封禁</h3><p>iOS13不支持使用KVC进行属性访问和设置了，需要修改为其它方式；例如修改UITextField的内部信息时候，不能使用KVC修改，可通过属性字符串来修改；</p><h3 id="黑暗模式"><a href="#黑暗模式" class="headerlink" title="黑暗模式"></a>黑暗模式</h3><p>iOS13推出了黑暗模式，如果不打算适配 Dark Mode，可以直接在 Info.plist 中添加一栏：User Interface Style : Light，即可在应用内禁用暗黑模式；</p><h3 id="即将废弃的LaunchImage"><a href="#即将废弃的LaunchImage" class="headerlink" title="即将废弃的LaunchImage"></a>即将废弃的LaunchImage</h3><p>在iOS8的时候，苹果就引入了LaunchScreen来设置启动页；同样我们也可以使用LaunchImage，不过需要提供各种屏幕尺寸的启动页图片；而LaunchScreen支持AutoLayout+SizeClass，使用更加方便。不过从2020年4月开始，所有使用iOS13 SDK的APP将必须提供LaunchScreen；</p><h3 id="presentViewController弹出方式和消失方式"><a href="#presentViewController弹出方式和消失方式" class="headerlink" title="presentViewController弹出方式和消失方式"></a>presentViewController弹出方式和消失方式</h3><p>iOS13会发现presentViewController的弹出方式不同，是因为<strong>modalPresentationStyle</strong>属性在之前默认是<strong>UIModalPresentationFullScreen</strong>，而iOS13改为<strong>UIModalPresentationAutomatic</strong>；<br>若想全屏展示，需手动修改弹出方式为<strong>UIModalPresentationFullScreen</strong>，且需要自己做适配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UINavigationController *nav &#x3D; [[UINavigationController alloc] initWithRootViewController:vc];</span><br><span class="line">nav.modalPresentationStyle &#x3D; UIModalPresentationFullScreen;</span><br><span class="line">[self presentViewController:nav animated:YES completion:nil];</span><br></pre></td></tr></table></figure><p>如果使用<strong>UIModalPresentationAutomatic</strong>为默认弹出方式，则弹窗的消失方式支持下滑消失，是因为UIViewController添加了modalInPresentation属性，默认为false，支持下滑消失，如果不想支持，需手动设置为true；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (@available(iOS 13.0, *)) &#123;</span><br><span class="line">    self.modalInPresentation &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UISegmentedControl样式"><a href="#UISegmentedControl样式" class="headerlink" title="UISegmentedControl样式"></a>UISegmentedControl样式</h3><p>UISegmentedControl默认样式为无色；</p><h3 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h3><p>当 Sign In with Apple 服务正式上线以后，接入第三方登录的APP都需要接入苹果登录，且置于最前；</p><h3 id="蓝牙权限申请"><a href="#蓝牙权限申请" class="headerlink" title="蓝牙权限申请"></a>蓝牙权限申请</h3><p>iOS13后需要在info.plist添加NSBluetoothAlwaysUsageDescription字段，说明使用目的；</p><h3 id="UIWebView将被禁止提交审核"><a href="#UIWebView将被禁止提交审核" class="headerlink" title="UIWebView将被禁止提交审核"></a>UIWebView将被禁止提交审核</h3><p>在 iOS 13 推出后，苹果在 UIWebView 的说明上将其支持的系统范围定格在了 iOS 2 ~ iOS 12。修改方式：用 WKWebView 替代 UIWebView，确保所有 UIWebView 的 api 都要移除；</p><h3 id="MPMoviePlayerController被废弃"><a href="#MPMoviePlayerController被废弃" class="headerlink" title="MPMoviePlayerController被废弃"></a>MPMoviePlayerController被废弃</h3><p>MPMoviePlayerController在iOS13被废弃，替代的是AVPlayerViewController；</p><h3 id="UISearchDisplayController被废弃"><a href="#UISearchDisplayController被废弃" class="headerlink" title="UISearchDisplayController被废弃"></a>UISearchDisplayController被废弃</h3><p>解决方案：使用 UISearchController 替换 UISearchBar + UISearchDisplayController 的组合方案；</p><p><a href="https://blog.csdn.net/qq_23091121/article/details/101023714" target="_blank" rel="noopener">参考资料1</a><br><a href="http://www.cocoachina.com/articles/83448" target="_blank" rel="noopener">参考资料2</a></p><h3 id="升级XCode10以后项目报错"><a href="#升级XCode10以后项目报错" class="headerlink" title="升级XCode10以后项目报错"></a>升级XCode10以后项目报错</h3><h4 id="Xcode-10-Error-Multiple-commands-produce问题及解决方案"><a href="#Xcode-10-Error-Multiple-commands-produce问题及解决方案" class="headerlink" title="Xcode 10 Error:Multiple commands produce问题及解决方案"></a>Xcode 10 Error:Multiple commands produce问题及解决方案</h4><p>Xcode 10报错：在工程的配置中有非法的LICENSE和Info.plist。<br>解决方案：找到工程-&gt;主 Target -&gt;Build Phases-&gt;Copy Bundle Resources。删除非法的LICENSE和Info.plist配置，重新编译工程就可以了。<br><a href="https://blog.csdn.net/jia12216/article/details/90374534" target="_blank" rel="noopener">参考链接</a></p><h4 id="XCode11-提示”String”-file-not-found之错误解决"><a href="#XCode11-提示”String”-file-not-found之错误解决" class="headerlink" title="XCode11 提示”String” file not found之错误解决"></a>XCode11 提示”String” file not found之错误解决</h4><blockquote><p>#include <String>    //file not found<br><a href="https://blog.csdn.net/zzl819954692/article/details/97395553" target="_blank" rel="noopener">参考链接</a></p></blockquote><h3 id="dyld-Library-not-loaded-rpath-iOS-13-3-1"><a href="#dyld-Library-not-loaded-rpath-iOS-13-3-1" class="headerlink" title="dyld: Library not loaded: @rpath/ iOS 13.3.1"></a>dyld: Library not loaded: @rpath/ iOS 13.3.1</h3><p>真机系统版本升到iOS 13.3.1后，苹果禁止在免费账户上使用外部框架;<br>解决方法：1、换一个付费的开发者账号；2、不用use_frameworks! 将use_frameworks!替换成use_modular_headers!，重新pod install。</p><h3 id="ERROR-”…-CP-Copy-Pods-Resources”"><a href="#ERROR-”…-CP-Copy-Pods-Resources”" class="headerlink" title="ERROR:”…[CP] Copy Pods Resources”"></a>ERROR:”…[CP] Copy Pods Resources”</h3><p>XCode10后默认使用New Build System编译，与旧版Xcode项目编译的规则不一定兼容，所以会出现上述错误。<br>解决：[CP] Copy Pods Resources 删掉Output File List<br><a href="https://www.jianshu.com/p/beb29d39c790" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;KVC限制，私有API被封禁&quot;&gt;&lt;a href=&quot;#KVC限制，私有API被封禁&quot; class=&quot;headerlink&quot; title=&quot;KVC限制，私有API被封禁&quot;&gt;&lt;/a&gt;KVC限制，私有API被封禁&lt;/h3&gt;&lt;p&gt;iOS13不支持使用KVC进行属性访问和设置
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS13适配" scheme="http://yoursite.com/tags/iOS13%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识回顾总结</title>
    <link href="http://yoursite.com/2019/12/20/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/20/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-20T15:46:08.000Z</published>
    <updated>2020-03-10T05:14:23.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><pre><code>道阻且长，行则将至心存敬畏之心，方能行有所止</code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><p>property的修饰符有哪些？并说明其区别？<br> atomic和nontomic的区别是什么？<br> iOS实现多线程的方式有哪些？举例说明。<br> dispatch的线程组使用过吗？怎么使用，有a、b、c、d 4个异步请求，如何判断a、b、c、d都完成执行？如果需要a、b、c、d顺序执行，该如何实现？<br> 在使用自动布局的时候有没有遇到过什么问题？<br> iOS13的新特性？<br> Git和SVN的区别？<br> iOS中协议除了在代理中使用还有什么作用？<br> 说说你对代理的理解，如果一个view（a）要传值给另一个view（b），那么谁是谁的代理？<br> KVC是什么？KVC机制的原理是什么？如果自己给一个属性重写了getter和setter方法，那么在.m中直接该属性的成员变量会出现什么效果？</p></blockquote><blockquote><p> 关于 HTTP 请求 GET 和 POST 的区别是什么?<br>    如何把 NSArray 里的 NSNumber 对象以顺序或反序排序?<br>    iOS 开发中数据持久化的几种方式。<br>    描述 UITableView的单元格重用机制,以及如何使用。<br>    循环引用的产生原因,以及解决方法。<br>    NSTimer 使用时注意事项?<br>    在某个实例方法中，self.name = _name，name = _name 它们有区别吗，为什么？</p></blockquote><blockquote><p>  了解GCD的信号量机制吗？</p></blockquote><h4 id="Property属性"><a href="#Property属性" class="headerlink" title="Property属性"></a>Property属性</h4><p>1、首先解释property，property是iOS用于定义属性，不需要手动编写访问方法，如果需要的话可以重写getter和setter方法；OC提供点语法来访问getter和setter，使用_访问属性则是直接访问底层的存储属性，不会调用setter方法；<br>2、assign、strong、weak、copy、readonly、readwrite、atomic；<br>    atomic和nonatomic —— 线程安全方面: atomic是一种多线程保护机制，使得属性具有原子性，防止在未完成赋值的情况下另一个线程读取属性造成的数据错误问题；atomic实际是采用自旋锁的方式，给setter方法加锁，这种方式需要耗费资源，执行效率会变低；<br>    自旋锁与互斥锁的区别：自旋锁指的是在一个线程执行的时候加锁，下一个线程会一直等待；当上一个线程执行完后，下一个线程立即执行；而互斥锁在等待的时候，下一个线程会进入睡眠状态；当上一个线程执行完后，下一个线程才会被唤醒，然后再执行；<br>    readwrite和readonly —— 访问权限: readonly只读属性，只会生成getter方法，不会生成setter方法；<br>    assign、weak、strong、copy、retain —— 内存管理:<br>    assign: 修饰基本数据类型，Int Float 还有id类型<br>    weak: 弱引用，只是单纯引用某个对象，不持有该对象<br>    strong（retain 用于MRC）: 强引用，使对象的引用数据类型+1<br>    assign和weak比较：<br>    相同点：assgin和weak不会牵扯到内存管理，不会增加引用计数<br>    不同点：assign可修饰基本数据类型，也可修饰OC对象，但如果修饰对象类型指向的是一个强指针，当它指向的这个指针释放后，他仍指向这块内存，必须手动给置为nil，否则就会产生野指针，如果还通过此指针操作那块内存，便会导致EXC_BAD_ACCESS错误，调用了已经释放的内存空间；而weak只能修饰OC对象，且相比assign比较安全，如果指向的对象消失了，那么他会自动置为nil，不会产生野指针。<br>    strong和copy比较：<br>    浅拷贝：指针拷贝，不产生新的对象，源对象的引用计数器加1；只是多了一个指向这块内存的指针，共用一块内存。<br>    深拷贝：对象拷贝，会产生新的对象，源对象的引用计数器不变；两块内存是完全不同的，也就是两个对象指针分别指向不同的内存，互不干涉。<br>    判断是浅拷贝和深拷贝就看一下两个变量的内存地址是否一样，一样就是浅拷贝，不一样就是深拷贝，也可以改变一个变量的其中一个属性值看两者的值都会发生变化；<br>    在不可变对象之间进行转换，strong与copy作用是一样的，但是如果在不可变与可变之间进行操作，就需要使用copy,这也就是为什么很多地方用copy，而不是strong修饰 NSString,NSArray等存在可变不可变之分的类对象了，避免出现意外的数据操作.<br>3、引申：block用过吗？修饰block用什么？为什么？<br>    要使用copy修饰；<br>    （1）block内部没有调用外部局部变量时存放在全局区(ARC和MRC下均是)<br>    （2）block使用了外部局部变量,这种情况也正是我们平时所常用的方式。MRC：Block的内存地址显示在栈区,栈区的特点就是创建的对象随时可能被销毁,一旦被销毁后续再次调用空对象就可能会造成程序崩溃,在对block进行copy后,block存放在堆区.所以在使用Block属性时使用copy修饰。但是ARC中的Block都会在堆上的，系统会默认对Block进行copy操作<br>    (3）用copy，strong修饰block在ARC和MRC都是可以的，都是在堆区<br>    总结：<br>    1:一共有三种类型的Block.分为<strong>NSGlobalBlock,</strong>NSStackBlock,<strong>NSMallocBlock.<br>    2:没有访问 auto变量 的block 就是 __NSGlobalBlock；访问了auto变量 的block 就是 __NSStackBlock；当一个</strong>NSStackBlock调用了copy操作,返回的就是一个__NSMallocBlock；<br>    3:在ARC环境下,编译器会自动把栈上的block copy到堆上。<br>    <a href="https://www.cnblogs.com/guohai-stronger/p/8993093.html" target="_blank" rel="noopener">参考链接：property属性</a><br>4、引申：iOS中代码创建UIView的时候，使用weak还是strong？<br>    <a href="https://blog.csdn.net/cjlcooper/article/details/53526505" target="_blank" rel="noopener">链接</a></p><h4 id="Git和SVN的区别"><a href="#Git和SVN的区别" class="headerlink" title="Git和SVN的区别"></a>Git和SVN的区别</h4><p>Git是分布式的，SVN是集中式的；Git和SVN都有集中式版本库和Server端，但Git是分布式管理的，每一个开发者都有一个Local Repository,所以没有网络也可以commit，创建分支，查看历史记录等，等联网以后push到远端即可；</p><h4 id="iOS中协议和代理的理解"><a href="#iOS中协议和代理的理解" class="headerlink" title="iOS中协议和代理的理解"></a>iOS中协议和代理的理解</h4><p>协议：可以把协议理解成方法的集合，与Java的接口不同的是，协议可以定义必须实现和非必须实现的方法；<br>代理：一种设计模式，通过协议（Protocal）来实现；让其他类去实现所遵循的协议中的方法；理解成： 一个View有一个事件处理，在view中声明一个协议，在控制器中将view的代理设置为self，这时候self就是该view的代理；</p><h4 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h4><p>父类实现深拷贝时，子类如何实现深度拷贝。父类没有实现深拷贝时，子类如何实现深度拷贝。 深拷贝同浅拷贝的区别：浅拷贝是指针拷贝，对一个对象进行浅拷贝，相当于对指向对象的指针进行复制，产生一个新的指向这个对象的指针，那么就是有两个指针指向同一个对象，这个对象销毁后两个指针都应该置空。深拷贝是对一个对象进行拷贝，相当于对对象进行复制，产生一个新的对象，那么就有两个指针分别指向两个对象。当一个对象改变或者被销毁后拷贝出来的新的对象不受影响。</p><p>实现深拷贝需要实现NSCoying协议，实现- (id)copyWithZone:(NSZone *)zone 方法。当对一个property属性含有copy修饰符的时候，在进行赋值操作的时候实际上就是调用这个方法。</p><p>父类实现深拷贝之后，子类只要重写copyWithZone方法，在方法内部调用父类的copyWithZone方法，之后实现自己的属性的处理</p><p>父类没有实现深拷贝，子类除了需要对自己的属性进行处理，还要对父类的属性进行处理。</p><h4 id="KVC和KVO"><a href="#KVC和KVO" class="headerlink" title="KVC和KVO"></a>KVC和KVO</h4><p> KVO，NSNotification，delegate及block区别 KVO就是cocoa框架实现的观察者模式，一般同KVC搭配使用，通过KVO可以监测一个值的变化，比如View的高度变化。是一对多的关系，一个值的变化会通知所有的观察者。 NSNotification是通知，也是一对多的使用场景。在某些情况下，KVO和NSNotification是一样的，都是状态变化之后告知对方。NSNotification的特点，就是需要被观察者先主动发出通知，然后观察者注册监听后再来进行响应，比KVO多了发送通知的一步，但是其优点是监听不局限于属性的变化，还可以对多种多样的状态变化进行监听，监听范围广，使用也更灵活。</p><p>delegate 是代理，就是我不想做的事情交给别人做。比如狗需要吃饭，就通过delegate通知主人，主人就会给他做饭、盛饭、倒水，这些操作，这些狗都不需要关心，只需要调用delegate（代理人）就可以了，由其他类完成所需要的操作。所以delegate是一对一关系。</p><p>block是delegate的另一种形式，是函数式编程的一种形式。使用场景跟delegate一样，相比delegate更灵活，而且代理的实现更直观。</p><p>KVO一般的使用场景是数据，需求是数据变化，比如股票价格变化，我们一般使用KVO（观察者模式）。delegate一般的使用场景是行为，需求是需要别人帮我做一件事情，比如买卖股票，我们一般使用delegate。 Notification一般是进行全局通知，比如利好消息一出，通知大家去买入。delegate是强关联，就是委托和代理双方互相知道，你委托别人买股票你就需要知道经纪人，经纪人也不要知道自己的顾客。Notification是弱关联，利好消息发出，你不需要知道是谁发的也可以做出相应的反应，同理发消息的人也不需要知道接收的人也可以正常发出消息。</p><h4 id="GCD多线程"><a href="#GCD多线程" class="headerlink" title="GCD多线程"></a>GCD多线程</h4><p>多线程的概念：同步、异步、串行、并行、死锁、队列</p><p>1、队列：三种类型：主队列（dispatch_get_main_queue）、全局并发队列（dispath_get_global_queue）、自定义队列（dispatch_queue_create）<br>2、死锁：死锁就是队列引起的循环等待；常见的死锁：主队列同步；</p><blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;deallock&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>解决：在主线程中运用主队列同步，也就是把任务放到了主线程的队列中。同步对于任务是立刻执行的，那么当把任务放进主队列时，它就会立马执行,只有执行完这个任务，viewDidLoad才会继续向下执行。而viewDidLoad和任务都是在主队列上的，由于队列的先进先出原则，任务又需等待viewDidLoad执行完毕后才能继续执行，viewDidLoad和这个任务就形成了相互循环等待，就造成了死锁。想避免这种死锁，可以将同步改成异步dispatch_async,或者将dispatch_get_main_queue换成其他串行或并行队列，都可以解决。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serialQueue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">dispatch_async(serialQueue, ^&#123;</span><br><span class="line">    dispatch_sync(serialQueue, ^&#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;deadlock&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>上面这种情况也会造成死锁；</code></pre><p>3、GCD执行顺序：<br>    1、串行队列先异步后同步<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serialQueue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">NSLog(@&quot;1&quot;);</span><br><span class="line">dispatch_async(serialQueue, ^&#123;</span><br><span class="line">     NSLog(@&quot;2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;3&quot;);</span><br><span class="line">dispatch_sync(serialQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;4&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;5&quot;);</span><br></pre></td></tr></table></figure><br>    打印结果： 1 3 2 4 5<br>    分析：首先先打印1。接下来将任务2其添加至串行队列上，由于任务2是异步，不会阻塞线程，继续向下执行，打印3然后是任务4,将任务4添加至串行队列上，因为任务4和任务2在同一串行队列，根据队列先进先出原则，任务4必须等任务2执行后才能执行，又因为任务4是同步任务，会阻塞线程，只有执行完任务4才能继续向下执行打印5。<br>    2、performSelector<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">    [self performSelector:@selector(test:) withObject:nil afterDelay:0];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>    分析：test方法并不会执行；[performSelector withObject]这个方法本身需要手动添加在runloop中去执行的；而GCD的全局队列所在线程并没有开启runloop，所以不会执行；如果把队列改为dispatch_get_main_queue主队列，由于主队列所在的主线程默认是开启runloop的，所以会之执行test方法；<br>4、dispatch_barrier_async（栅栏函数）<br>    问：怎么用GCD实现多读单写？<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t concurrentQueue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">for (NSInteger i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">    dispatch_sync(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;%zd&quot;,i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_barrier_sync(concurrentQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;barrier&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">for (NSInteger i &#x3D; 10; i &lt; 20; i++) &#123;</span><br><span class="line">    dispatch_sync(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;%zd&quot;,i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    分析：这里的dispatch_barrier_sync上的队列要和需要阻塞的任务在同一队列上，否则是无效的。从打印上看，任务0-9和任务任务10-19因为是异步并发的原因，彼此是无序的。而由于栅栏函数的存在，导致顺序必然是先执行任务0-9，再执行栅栏函数，再去执行任务10-19。<br>    而dispatch_barrier_sync和dispatch_barrier_async的区别也就在于会不会阻塞当前线程。比如，上述代码如果在dispatch_barrier_async后随便加一条打印，则会先去执行该打印，再去执行任务0-9和栅栏函数；而如果是dispatch_barrier_sync，则会在任务0-9和栅栏函数后去执行这条打印。<br>    设计多读单写：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (id)readDataForKey:(NSString *)key</span><br><span class="line">&#123;</span><br><span class="line">    __block id result;</span><br><span class="line">    dispatch_sync(_concurrentQueue, ^&#123;</span><br><span class="line">        result &#x3D; [self valueForKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)writeData:(id)data forKey:(NSString *)key</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_barrier_async(_concurrentQueue, ^&#123;</span><br><span class="line">        [self setValue:data forKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>5、dispatch_group_async<br>    场景：在n个耗时并发任务都完成后，再去执行接下来的任务。比如，在n个网络请求完成后去刷新UI页面；<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t concurrentQueue &#x3D; dispatch_queue_create(&quot;test1&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span><br><span class="line"></span><br><span class="line">for (NSInteger i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;%zd:网络请求&quot;,i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;刷新页面&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>6、Dispatch Semaphore<br>    GCD 中的信号量是指 Dispatch Semaphore，是持有计数的信号。</p></blockquote><pre><code>Dispatch Semaphore 提供了三个函数：1.dispatch_semaphore_create：创建一个Semaphore并初始化信号的总量2.dispatch_semaphore_signal：发送一个信号，让信号总量加13.dispatch_semaphore_wait：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。Dispatch Semaphore 在实际开发中主要用于：1、保持线程同步，将异步执行任务转换为同步执行任务2、保证线程安全，为线程加锁例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncTask</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER);   </span><br><span class="line">    count++;</span><br><span class="line">    sleep(1);</span><br><span class="line">    NSLog(@&quot;执行任务:%zd&quot;,count);</span><br><span class="line">    dispatch_semaphore_signal(_semaphore);</span><br><span class="line">&#125;</span><br><span class="line">for (NSInteger i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        [self asyncTask];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>分析：然后发现打印是从任务1顺序执行到100，没有发生两个任务同时执行的情况；原因如下:在子线程中并发执行asyncTask，那么第一个添加到并发队列里的，会将信号量减1，此时信号量等于0，可以执行接下来的任务。而并发队列中其他任务，由于此时信号量不等于0，必须等当前正在执行的任务执行完毕后调用dispatch_semaphore_signal将信号量加1，才可以继续执行接下来的任务，以此类推，从而达到线程加锁的目的。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot; title=&quot;感想&quot;&gt;&lt;/a&gt;感想&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;道阻且长，行则将至
心存敬畏之心，方能行有所止&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>sass、less、stylus总结</title>
    <link href="http://yoursite.com/2019/12/12/sass/less/stylus%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/12/sass/less/stylus%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2020-03-20T03:43:04.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS预处理程序"><a href="#CSS预处理程序" class="headerlink" title="CSS预处理程序"></a>CSS预处理程序</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>CSS预处理程序是基于 CSS 扩展了一套属于自己的 DSL，来解决书写 CSS 时繁杂的问题。<br>        1、语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；<br>        2、没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</p></blockquote><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p> <strong><em>支持嵌套语法</em></strong><br> <strong><em>支持使用运算符</em></strong><br> 例如less中：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> @fontSize: 10px;</span><br><span class="line">.myclass &#123;</span><br><span class="line"> font-size: @fontSize * 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> <strong><em>变量</em></strong><br> 变量为 CSS 增加了一种有效的复用方式，减少了原来在 CSS 中无法避免的重复「硬编码」。<br> <strong><em>可动态构建选择器</em></strong><br> <strong><em>混入</em></strong><br> 混入（mixin）提供了样式层面的抽象。</p><hr><h3 id="三大CSS预处理器框架"><a href="#三大CSS预处理器框架" class="headerlink" title="三大CSS预处理器框架"></a>三大CSS预处理器框架</h3><h4 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h4><blockquote><p>2007年诞生，是最早的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS。</p></blockquote><h4 id="LESS"><a href="#LESS" class="headerlink" title="LESS"></a>LESS</h4><blockquote><p>2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS，其缺点是比起SASS来，可编程功能不够，不过优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，Bootstrap就是采用LESS做底层语言的。</p></blockquote><h4 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h4><blockquote><p>2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。</p></blockquote><h3 id="SASS、LESS、Stylus区别"><a href="#SASS、LESS、Stylus区别" class="headerlink" title="SASS、LESS、Stylus区别"></a>SASS、LESS、Stylus区别</h3><blockquote><p>编译环境不同：Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件，直接放到项目中，也有 Less.app、SimpleLess、CodeKit.app这样的工具，也有在线编译地址。Stylus需要安装node，然后安装最新的stylus包即可使用。<br>变量符不同：Less是@，Scss是$，Stylus可以使用“$”符号或者不使用符号，如下：<br>处理条件语句：<br>引入外部CSS文件：scss引用的外部文件命名必须以_开头, 文件名如果以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件。Less和Stylus引用外部文件可以用@import进行引入。</p></blockquote><p><a href="https://efe.baidu.com/blog/revisiting-css-preprocessors/" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS预处理程序&quot;&gt;&lt;a href=&quot;#CSS预处理程序&quot; class=&quot;headerlink&quot; title=&quot;CSS预处理程序&quot;&gt;&lt;/a&gt;CSS预处理程序&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS预处理程序" scheme="http://yoursite.com/tags/CSS%E9%A2%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础入门</title>
    <link href="http://yoursite.com/2019/10/01/JavaScript%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/10/01/JavaScript%E5%85%A5%E9%97%A8/</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2020-03-20T03:45:19.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p> 声明变量时候用var命令，变量是有作用域的，分为局部变量和全局变量；<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br></pre></td></tr></table></figure><br> 实际上是执行：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a &#x3D; 1;</span><br></pre></td></tr></table></figure><br> 声明变量的时候要声明类型，若不声明类型比如（b = 1;），则是创建了全局变量；JS是动态类型语言，可随时更改变量类型；</p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p> <strong><em>JavaScript引擎工作方式:</em></strong><br> 先解析代码，获得所有被声明的变量，然后一行一行执行，变量的声明会被提升到头部，叫做变量提升；</p><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p> javaScript使用{}作为区块，对于var命令来说，区块不构成单独作用域；</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p> 标签（label），定位符，用于跳转到程序任意位置；</p><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h4><blockquote><p>number string boolean undefined null 对象 symbol(ES6新增)<br>number string boolean 属于基本数据类型；<br>undefined null 属于特殊值；<br>对象包括对象、数组、函数类型；</p></blockquote><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><blockquote><p>typeof 123   结果：number<br>typeof ‘123’   结果：string<br>typeof false   结果：boolean<br>typeof undefined   结果：undefined<br>typeof []   结果：object<br>typeof {}   结果：object<br>typeof null   结果：object<br>有上述可见：typeof可以区分出基本数据类型，但无法区分出object和null类型；</p></blockquote><h4 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h4><p>null == undefined  结果是true<br>null === undefined  结果是false<br>区别是null转为数值是0，而undefined转为数值是NaN；</p><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><p>undefined、null、false、0、NAN、“”或者’’ 转为boolean是false，其他都为true，包括空数组和空对象；</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><blockquote><p>JavaScript内部所有数字都是以浮点数存储的，底层根本没有整数，所有数字都是小数；整数运算时，会吧64位浮点数转为32位整数再进行计算；<br>例如：<br>1 === 1.0  结果为true<br>1 + 2 === 3.0 结果为true</p></blockquote><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><blockquote><p>浮点数不是精确值<br>0.1 + 0.2 === 0.3  结果为false</p></blockquote><h4 id="NAN"><a href="#NAN" class="headerlink" title="NAN"></a>NAN</h4><p>typeof NAN  结果为number<br>5 - ‘1’  结果为4<br>5 - ‘x’  结果为NAN<br>NAN不等于任何值，包括它本身；</p><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h4><p>parseInt(‘123’)<br>parseInt(‘  123’)<br>parseInt(1.23)<br>parseInt(‘8a’)<br>parseInt(‘abc’)<br>parseInt(‘’)<br>parseInt(‘1000’, 2)<br>parseInt(‘10’, 1)<br>parseInt(‘10’, 0)<br>parseInt(‘1546’,2)   </p><p>结果分别是：</p><p>123<br>123<br>1<br>8<br>NaN<br>NaN<br>8<br>NaN<br>10<br>1</p><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h4><p>parseFloat(‘3.14’)  3.14<br>parseFloat([])   NaN<br>parseFloat(‘’)   NaN</p><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h4><p>isNaN(NaN)   true<br>isNaN(123)   false<br>isNaN(‘hello’)   true    相当于：isNaN(‘hello’) =&gt; isNaN(Number(‘hello’))<br>isNaN({})   true</p><p>所以：判断一个数据类型是不是isNaN，有两种方式：<br>1、typeof value == ‘number’ &amp;&amp; isNaN(value)    值是number类型并且isNaN是true<br>2、value !== value                             自身不等于自身</p><h4 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h4><p>字符串可以作为数组来使用；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s &#x3D; &#39;hello&#39;;</span><br><span class="line">s[0]    &#x2F;&#x2F; &#39;h&#39;</span><br><span class="line">s.length   &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><h5 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;Hello&#39;,</span><br><span class="line">  bar: &#39;World&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h5><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var o1 &#x3D; &#123;&#125;;</span><br><span class="line">var o2 &#x3D; o1;</span><br><span class="line"></span><br><span class="line">o1.a &#x3D; 1;</span><br><span class="line">o2.a &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">o2.b &#x3D; 2;</span><br><span class="line">o1.b &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><h5 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h5><p>读取和赋值均是两种方式：点语法和方括号</p><h5 id="属性的查看"><a href="#属性的查看" class="headerlink" title="属性的查看"></a>属性的查看</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;Hello&#39;,</span><br><span class="line">  bar: &#39;World&#39;</span><br><span class="line">&#125;</span><br><span class="line">Object.keys(obj)</span><br></pre></td></tr></table></figure><p>结果：[‘foo’,’bar’]</p><h5 id="属性的删除"><a href="#属性的删除" class="headerlink" title="属性的删除"></a>属性的删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;Hello&#39;,</span><br><span class="line">  bar: &#39;World&#39;</span><br><span class="line">&#125;</span><br><span class="line">Object.keys(obj) &#x2F;&#x2F; [&#39;foo&#39;,&#39;bar&#39;]</span><br><span class="line"></span><br><span class="line">delete obj.foo &#x2F;&#x2F; true</span><br><span class="line">obj.foo &#x2F;&#x2F; undefined</span><br><span class="line">Object.keys(obj) &#x2F;&#x2F; [&#39;foo&#39;]</span><br></pre></td></tr></table></figure><p>delete一个不存在的属性也会返回true；<br>delete只能删除对象本身的属性，不能删除继承的属性；</p><h5 id="属性是否存在：in运算符"><a href="#属性是否存在：in运算符" class="headerlink" title="属性是否存在：in运算符"></a>属性是否存在：in运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;Hello&#39;,</span><br><span class="line">  bar: &#39;World&#39;</span><br><span class="line">&#125;;</span><br><span class="line">&#39;foo&#39; in obj  &#x2F;&#x2F; true</span><br><span class="line">&#39;toString&#39; in obj &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>注意点：<br>1、in运算符无法识别属性是对象自身的，还是继承过来的；<br>2、想要判断是否是自身的属性，使用hasOwnProperty,例如hasOwnProperty(‘toString’)</p><h5 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;Hello&#39;,</span><br><span class="line">  bar: &#39;World&#39;</span><br><span class="line">&#125;;</span><br><span class="line">for (var i in obj) &#123;</span><br><span class="line">  console.log(&#39;键名：&#39;, i);</span><br><span class="line">  console.log(&#39;键值：&#39;, obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：<br>1、for in遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。<br>2、for in不仅遍历对象自身的属性，还遍历继承的属性。<br>3、对象都继承了toString属性，但是for…in循环不会遍历到这个属性，因为toString默认是“不可遍历”的；所以一般情况下，如果只想遍历对象自身的属性，应结合使用hasOwnProperty方法。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><p>1、function命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function print(s) &#123;</span><br><span class="line">  console.log(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、函数表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var print &#x3D; function(s) &#123;</span><br><span class="line">  console.log(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">f() &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">function f() &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;</span><br><span class="line">f() &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name属性</span><br><span class="line">length属性：length属性就是定义时的参数个数。不管调用时输入了多少个参数，length属性始终等于定义时的参数个数。</span><br><span class="line">toString()方法：返回一个字符串，内容是函数的源码</span><br></pre></td></tr></table></figure><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>作用域（scope）指的是变量存在的范围。在 ES5 的规范中，JavaScript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域；</p><p>全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var v &#x3D; 1;</span><br><span class="line">function f() &#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br><span class="line">&#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><p>局部变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">  var v &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">v &#x2F;&#x2F; ReferenceError: v is not defined</span><br></pre></td></tr></table></figure><p>函数本身的作用域：<br>函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var x &#x3D; function () &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">function f() &#123;</span><br><span class="line">  var a &#x3D; 2;</span><br><span class="line">  x();</span><br><span class="line">&#125;</span><br><span class="line">f() &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; function () &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">function y(f) &#123;</span><br><span class="line">  var a &#x3D; 2;</span><br><span class="line">  f();</span><br><span class="line">&#125;</span><br><span class="line">y(x)</span><br><span class="line">&#x2F;&#x2F; ReferenceError: a is not defined</span><br></pre></td></tr></table></figure><p>函数体内部声明的函数，作用域绑定函数体内部:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  var x &#x3D; 1;</span><br><span class="line">  function bar() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  return bar;</span><br><span class="line">&#125;</span><br><span class="line">var x &#x3D; 2;</span><br><span class="line">var f &#x3D; foo();</span><br><span class="line">f() &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createIncrementor(start) &#123;</span><br><span class="line">  return function () &#123;</span><br><span class="line">    return start++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var inc &#x3D; createIncrementor(5);</span><br><span class="line"></span><br><span class="line">inc() &#x2F;&#x2F; 5</span><br><span class="line">inc() &#x2F;&#x2F; 6</span><br><span class="line">inc() &#x2F;&#x2F; 7</span><br></pre></td></tr></table></figure><p>为什么会这样呢？原因就在于inc始终在内存中，而inc的存在依赖于createIncrementor，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组属于一种特殊的对象。typeof运算符会返回数组的类型是object。</p><h5 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h5><p>Object.keys方法返回数组的所有键名，注意：JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。<br>对象有两种读取成员的方法：点结构（object.key）和方括号结构（object[key]），对于数组的键名，不能使用点结构。</p><h5 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h5><p>length属性是可写的，可以手动设置；<br>1、如果设置length小于数组长度，会自动减少元素个数为length个；所以清空数组的一个方法就是设置数组的length为0；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ];</span><br><span class="line">arr.length &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">arr.length &#x3D; 2;</span><br><span class="line">arr &#x2F;&#x2F; [&quot;a&quot;, &quot;b&quot;]</span><br></pre></td></tr></table></figure><p>2、如果人为设置length大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。<br>3、由于数组本质上是一种对象，所以可以为数组添加属性，但是这不影响length属性的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; [];</span><br><span class="line">a[&#39;p&#39;] &#x3D; &#39;abc&#39;;</span><br><span class="line">a.length &#x2F;&#x2F; 0</span><br><span class="line">a[2.1] &#x3D; &#39;abc&#39;;</span><br><span class="line">a.length &#x2F;&#x2F; 0</span><br></pre></td></tr></table></figure><p>4、使用delete命令删除一个数组成员，会形成空位，并且不会影响length属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; [1, 2, 3];</span><br><span class="line">delete a[1];</span><br><span class="line"></span><br><span class="line">a[1] &#x2F;&#x2F; undefined</span><br><span class="line">a.length &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure><p>也就是说，length属性不过滤空位。所以，使用length属性进行数组遍历，一定要非常小心。<br>如果是空位，使用数组的forEach、for…in、Object.keys方法进行遍历，空位都会被跳过,而undefined则表示数组有这个元素，值是undefined，所以遍历不会跳过。</p><h5 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h5><p>检查某个键名是否存在的运算符in，适用于对象，也适用于数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ];</span><br><span class="line">2 in arr  &#x2F;&#x2F; true</span><br><span class="line">&#39;2&#39; in arr &#x2F;&#x2F; true</span><br><span class="line">4 in arr &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h5 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h5><p>for…in循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。而且，for…in不仅会遍历数组所有的数字键，还会遍历非数字键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; [1, 2, 3];</span><br><span class="line">a.foo &#x3D; true;</span><br><span class="line"></span><br><span class="line">for (var key in a) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 0</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">&#x2F;&#x2F; foo</span><br></pre></td></tr></table></figure><p>所以，不推荐使用for…in遍历数组。</p><h4 id="类似数组的对象"><a href="#类似数组的对象" class="headerlink" title="类似数组的对象"></a>类似数组的对象</h4><p>如果一个对象的所有键名都是正整数或零，并且有length属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  0: &#39;a&#39;,</span><br><span class="line">  1: &#39;b&#39;,</span><br><span class="line">  2: &#39;c&#39;,</span><br><span class="line">  length: 3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[0] &#x2F;&#x2F; &#39;a&#39;</span><br><span class="line">obj[1] &#x2F;&#x2F; &#39;b&#39;</span><br><span class="line">obj.length &#x2F;&#x2F; 3</span><br><span class="line">obj.push(&#39;d&#39;) &#x2F;&#x2F; TypeError: obj.push is not a function</span><br></pre></td></tr></table></figure><p>“类似数组的对象”的根本特征，就是具有length属性。只要有length属性，就可以认为这个对象类似于数组。但是有一个问题，这种length属性不是动态值，不会随着成员的变化而变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  length: 0</span><br><span class="line">&#125;;</span><br><span class="line">obj[3] &#x3D; &#39;d&#39;;</span><br><span class="line">obj.length &#x2F;&#x2F; 0</span><br></pre></td></tr></table></figure><p>数组的slice方法可以将“类似数组的对象”变成真正的数组:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; Array.prototype.slice.call(arrayLike);</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
